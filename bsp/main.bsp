[IMPORT "bsp/tokens.bsp"]
[IMPORT "bsp/parser.bsp"]
[IMPORT "bsp/types.bsp"]
[IMPORT "bsp/ir/ir.bsp"]
[IMPORT "bsp/ir/build.bsp"]

[DEFINE code "[PRINT \"Hello, World!\"]\n"]

# Tokenize
[DEFINE tokenserr [TOKENIZE "hello.bsp" [VAR code]]]
[IF [CANCAST [VAR tokenserr] error]
  [FAIL [VAR tokenserr]]
]
[DEFINE tokens [CAST [VAR tokenserr] ARRAY{token}]]

# Print
[PRINT "TOKENS: "]
[DEFINE i 0]
[WHILE [COMPARE [VAR i] < [LENGTH [VAR tokens]]]
  [DEFINE tok [INDEX [VAR tokens] [VAR i]]]
  [PRINT [CONCAT "{" [POSSTR [GET [VAR tok] pos]] ", " [STRING [GET [VAR tok] typ]] ", " [GET [VAR tok] val] "}"]]
  [DEFINE i [MATH [VAR i] + 1]]
]

# Parse
[DEFINE perr [PARSE [VAR tokens]]]
[IF [CANCAST [VAR perr] error]
  [FAIL [VAR perr]]
]
[DEFINE p [CAST [VAR perr] ARRAY{parserNode}]]

# Print
[PRINT "\nNODES: "]
[DEFINE i 0]
[WHILE [COMPARE [VAR i] < [LENGTH [VAR p]]]
  [PRINTNODE [INDEX [VAR p] [VAR i]] ""]
  [DEFINE i [MATH [VAR i] + 1]]
]

# Types
[PRINT "\nTYPES:"]
[DEFINE a [_ARRAY [_INT]]]
[DEFINE b [FUNCTION [ARRAY [_INT] [_STRING]] [_NULL]]]
[DEFINE c [STRUCT [ARRAY [FIELD "h" [_INT]] [FIELD "i" [_STRING]]]]]
[DEFINE d [STRUCT [ARRAY [FIELD "h" [_INT]] [FIELD "j" [_STRING]]]]]
[PRINT [TSTRING [VAR a]]]
[PRINT [TSTRING [VAR b]]]
[PRINT [TSTRING [VAR c]]]
[PRINT [TSTRING [VAR d]]]

[DEFINE e [TEQUAL [VAR c] [VAR d]]]
[IF [VAR e] [PRINT "TRUE"] ELSE [PRINT "FALSE"]]

[DEFINE f [TEQUAL [VAR c] [VAR c]]]
[IF [VAR f] [PRINT "TRUE"] ELSE [PRINT "FALSE"]]

# IR
[PRINT "\nIR:"]
[DEFINE bld [newBuilder]]
[DEFINE out [irBuild [VAR bld] [VAR p]]]
[IF [CANCAST [VAR out] error]
  [FAIL [VAR out]]
]
[DEFINE ir [CAST [VAR out] ir]]
[PRINT [CONCAT "Node Count: " [STRING [LENGTH [GET [VAR ir] body]]]]]
