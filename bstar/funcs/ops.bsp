[IMPORT "bstar/interp.bsp"]
[IMPORT "bstar/funcs/funcs.bsp"]

[FUNC b2i [PARAM b BOOL] [RETURNS INT] [IF [VAR b] [RETURN 1]] [RETURN 0]]

[FUNC nodes_equal [PARAM a node] [PARAM b node] [RETURNS INT]
  [IF [COMPARE [GET [VAR a] kind] != [GET [VAR b] kind]]
    [RETURN 0]
  ]
  [SWITCH [GET [VAR a] kind] 
    [CASE [CONST nodeKindString]
      [DEFINE a [CAST [GET [VAR a] val] STRING]]
      [DEFINE b [CAST [GET [VAR b] val] STRING]]
      [RETURN [b2i [COMPARE [VAR a] == [VAR b]]]]
    ]

    [CASE [CONST nodeKindInt]
      [DEFINE a [CAST [GET [VAR a] val] INT]]
      [DEFINE b [CAST [GET [VAR b] val] INT]]
      [RETURN [b2i [COMPARE [VAR a] == [VAR b]]]]
    ]

    [CASE [CONST nodeKindFloat]
      [DEFINE a [CAST [GET [VAR a] val] FLOAT]]
      [DEFINE b [CAST [GET [VAR b] val] FLOAT]]
      [RETURN [b2i [COMPARE [VAR a] == [VAR b]]]]
    ]

    [CASE [CONST nodeKindArray]
      [DEFINE a [CAST [GET [VAR a] val] ARRAY{node}]]
      [DEFINE b [CAST [GET [VAR b] val] ARRAY{node}]]
      [IF [COMPARE [LENGTH [VAR a]] != [LENGTH [VAR b]]]
        [RETURN 0]
      ]
      [DEFINE i 0]
      [WHILE [COMPARE [VAR i] < [LENGTH [VAR a]]]
        [IF [COMPARE [nodes_equal [INDEX [VAR a] [VAR i]] [INDEX [VAR b] [VAR i]]] != 1]
          [RETURN 0]
        ]
        [DEFINE i [MATH [VAR i] + 1]]
      ]
      [RETURN 1]
    ]
  ]
  [RETURN 0]
]

[FUNC node_ge [PARAM a node] [PARAM b node] [RETURNS INT][IF [COMPARE [GET [VAR a] kind] != [GET [VAR b] kind]][RETURN 0]][SWITCH [GET [VAR a] kind] [CASE [CONST nodeKindString][DEFINE a [CAST [GET [VAR a] val] STRING]][DEFINE b [CAST [GET [VAR b] val] STRING]][RETURN [b2i [COMPARE [VAR a] >= [VAR b]]]]][CASE [CONST nodeKindInt][DEFINE a [CAST [GET [VAR a] val] INT]][DEFINE b [CAST [GET [VAR b] val] INT]][RETURN [b2i [COMPARE [VAR a] >= [VAR b]]]]][CASE [CONST nodeKindFloat][DEFINE a [CAST [GET [VAR a] val] FLOAT]][DEFINE b [CAST [GET [VAR b] val] FLOAT]][RETURN [b2i [COMPARE [VAR a] >= [VAR b]]]]]][RETURN 0]]
[FUNC node_le [PARAM a node] [PARAM b node] [RETURNS INT][IF [COMPARE [GET [VAR a] kind] != [GET [VAR b] kind]][RETURN 0]][SWITCH [GET [VAR a] kind] [CASE [CONST nodeKindString][DEFINE a [CAST [GET [VAR a] val] STRING]][DEFINE b [CAST [GET [VAR b] val] STRING]][RETURN [b2i [COMPARE [VAR a] <= [VAR b]]]]][CASE [CONST nodeKindInt][DEFINE a [CAST [GET [VAR a] val] INT]][DEFINE b [CAST [GET [VAR b] val] INT]][RETURN [b2i [COMPARE [VAR a] <= [VAR b]]]]][CASE [CONST nodeKindFloat][DEFINE a [CAST [GET [VAR a] val] FLOAT]][DEFINE b [CAST [GET [VAR b] val] FLOAT]][RETURN [b2i [COMPARE [VAR a] <= [VAR b]]]]]][RETURN 0]]
[FUNC node_gt [PARAM a node] [PARAM b node] [RETURNS INT][IF [COMPARE [GET [VAR a] kind] != [GET [VAR b] kind]][RETURN 0]][SWITCH [GET [VAR a] kind] [CASE [CONST nodeKindString][DEFINE a [CAST [GET [VAR a] val] STRING]][DEFINE b [CAST [GET [VAR b] val] STRING]][RETURN [b2i [COMPARE [VAR a] > [VAR b]]]]][CASE [CONST nodeKindInt][DEFINE a [CAST [GET [VAR a] val] INT]][DEFINE b [CAST [GET [VAR b] val] INT]][RETURN [b2i [COMPARE [VAR a] > [VAR b]]]]][CASE [CONST nodeKindFloat][DEFINE a [CAST [GET [VAR a] val] FLOAT]][DEFINE b [CAST [GET [VAR b] val] FLOAT]][RETURN [b2i [COMPARE [VAR a] > [VAR b]]]]]][RETURN 0]]
[FUNC node_lt [PARAM a node] [PARAM b node] [RETURNS INT][IF [COMPARE [GET [VAR a] kind] != [GET [VAR b] kind]][RETURN 0]][SWITCH [GET [VAR a] kind] [CASE [CONST nodeKindString][DEFINE a [CAST [GET [VAR a] val] STRING]][DEFINE b [CAST [GET [VAR b] val] STRING]][RETURN [b2i [COMPARE [VAR a] < [VAR b]]]]][CASE [CONST nodeKindInt][DEFINE a [CAST [GET [VAR a] val] INT]][DEFINE b [CAST [GET [VAR b] val] INT]][RETURN [b2i [COMPARE [VAR a] < [VAR b]]]]][CASE [CONST nodeKindFloat][DEFINE a [CAST [GET [VAR a] val] FLOAT]][DEFINE b [CAST [GET [VAR b] val] FLOAT]][RETURN [b2i [COMPARE [VAR a] < [VAR b]]]]]][RETURN 0]]

[FUNC node_compare [PARAM args ARRAY{node}] [RETURNS ANY]
  [DEFINE lhs [INDEX [VAR args] 0]]
  [DEFINE op [CAST [GET [INDEX [VAR args] 1] val] STRING]]
  [DEFINE rhs [INDEX [VAR args] 2]]

  [DEFINE out 0]
  [SWITCH [VAR op]
    [CASE "="
      [DEFINE out [nodes_equal [VAR lhs] [VAR rhs]]]
    ]

    [CASE "<"
      [DEFINE out [node_lt [VAR lhs] [VAR rhs]]]
    ]

    [CASE ">"
      [DEFINE out [node_gt [VAR lhs] [VAR rhs]]]
    ]

    [CASE "<="
      [DEFINE out [node_le [VAR lhs] [VAR rhs]]]
    ]

    [CASE ">="
      [DEFINE out [node_ge [VAR lhs] [VAR rhs]]]
    ]

    [DEFAULT [RETURN [NODE_ERR [INDEX [VAR args] 1] "unknown comparison operator"]]]
  ]

  [DEFINE n [MAKE node]]
  [SET [VAR n] kind [CONST nodeKindInt]]
  [SET [VAR n] val [ANY [VAR out]]]
  [RETURN [ANY [VAR n]]]
]

[ADD_BLD "COMPARE" [FN node_compare]]