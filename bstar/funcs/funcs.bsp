# TODO: Error checking in all the funcs when indexing args, casting, etc.
[IMPORT "bstar/parser.bsp"]
[IMPORT "errors.bsp"]

[FUNC NODE_ERR [PARAM node node] [PARAM msg STRING] [RETURNS ANY]
  [RETURN [ERROR [CONCAT "Error at \"" [NODE_STRING [VAR node]] "\": " [VAR msg]]]]
]

[FUNC EMPTY_NODE [RETURNS node] 
  [DEFINE out [MAKE node]]
  [SET [VAR out] kind [CONST nodeKindString]]
  [SET [VAR out] val [ANY ""]]
  [RETURN [VAR out]]
]

[DEFINE blds [MAKE MAP{STRING, FUNC{node, ARRAY{node}}ANY}]]
[DEFINE blks [MAKE MAP{STRING, FUNC{node, ARRAY{node}}ANY}]]

[FUNC ADD_BLD [PARAM name STRING] [PARAM fn FUNC{node, ARRAY{node}}ANY]
  [SET [VAR blds] [VAR name] [VAR fn]]
]

[FUNC ADD_BLK [PARAM name STRING] [PARAM fn FUNC{node, ARRAY{node}}ANY]
  [SET [VAR blks] [VAR name] [VAR fn]]
]

# Basic funcs
[FUNC node_array [PARAM self node] [PARAM args ARRAY{node}] [RETURNS ANY]
  [DEFINE out [MAKE node]]
  [SET [VAR out] kind [CONST nodeKindArray]]
  [SET [VAR out] val [ANY [VAR args]]]
  [RETURN [ANY [VAR out]]]
]

[ADD_BLD "ARRAY" [FN node_array]]

[FUNC node_comment [PARAM self node] [PARAM args ARRAY{node}] [RETURNS ANY]
  [RETURN [ANY [EMPTY_NODE]]]
]

[ADD_BLD "#" [FN node_comment]]

[FUNC node_concat [PARAM self node] [PARAM args ARRAY{node}] [RETURNS ANY]
  [DEFINE out ""]
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR args]]]
    [DEFINE out [CONCAT [VAR out] [NODE_STRING [INDEX [VAR args] [VAR i]]]]]
    [DEFINE i [MATH [VAR i] + 1]]
  ]

  [DEFINE node [MAKE node]]
  [SET [VAR node] kind [CONST nodeKindString]]
  [SET [VAR node] val [ANY [VAR out]]]
  [RETURN [ANY [VAR node]]]
]

[ADD_BLD "CONCAT" [FN node_concat]]

[FUNC node_index [PARAM self node] [PARAM args ARRAY{node}] [RETURNS ANY]
  [DEFINE arg [INDEX [VAR args] 0]]
  [DEFINE ind [CAST [GET [INDEX [VAR args] 1] val] INT]]
  [SWITCH [GET [VAR arg] kind]
    [CASE [CONST nodeKindString]
      [DEFINE val [INDEX [CAST [GET [VAR arg] val] STRING] [VAR ind]]]
      [DEFINE node [MAKE node]]
      [SET [VAR node] kind [CONST nodeKindString]]
      [SET [VAR node] val [ANY [STRING [VAR val]]]]
      [RETURN [ANY [VAR node]]]
    ]

    [CASE [CONST nodeKindArray]
      [DEFINE val [INDEX [CAST [GET [VAR arg] val] ARRAY{node}] [VAR ind]]]
      [RETURN [ANY [VAR val]]]
    ]
  ]

  [RETURN [ANY [EMPTY_NODE]]]
]

[ADD_BLD "INDEX" [FN node_index]]