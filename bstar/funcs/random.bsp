[IMPORT "bstar/interp.bsp"]
[IMPORT "bstar/funcs/funcs.bsp"]
[IMPORT "math.bsp"]

[FUNC node_choose [PARAM args ARRAY{node}] [RETURNS ANY]
  [DEFINE arr [VAR args]]
  [IF [CANCAST [GET [INDEX [VAR args] 0] val] ARRAY{node}]
    [DEFINE arr [CAST [GET [INDEX [VAR args] 0] val] ARRAY{node}]]
  ]
  [DEFINE ind [RANDINT 0 [LENGTH [VAR arr]]]]
  [RETURN [ANY [INDEX [VAR arr] [VAR ind]]]]
]

[ADD_BLD "CHOOSE" [FN node_choose]]

[FUNC node_choosechar [PARAM args ARRAY{node}] [RETURNS ANY]
  [DEFINE str [CAST [GET [INDEX [VAR args] 0] val] STRING]]
  [DEFINE ind [RANDINT 0 [LENGTH [VAR str]]]]

  [DEFINE out [MAKE node]]
  [SET [VAR out] kind [CONST nodeKindString]]
  [SET [VAR out] val [ANY [STRING [INDEX [VAR str] [VAR ind]]]]]
  [RETURN [ANY [VAR out]]]
]

[ADD_BLD "CHOOSECHAR" [FN node_choosechar]]

[FUNC node_randint [PARAM args ARRAY{node}] [RETURNS ANY]
  [DEFINE lower [CAST [GET [INDEX [VAR args] 0] val] INT]]
  [DEFINE upper [CAST [GET [INDEX [VAR args] 1] val] INT]]
  [DEFINE val [RANDINT [VAR lower] [VAR upper]]]

  [DEFINE out [MAKE node]]
  [SET [VAR out] kind [CONST nodeKindInt]]
  [SET [VAR out] val [ANY [VAR val]]]
  [RETURN [ANY [VAR out]]]
]

[ADD_BLD "RANDINT" [FN node_randint]]

[FUNC node_concat [PARAM args ARRAY{node}] [RETURNS ANY]
  [DEFINE out ""]
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR args]]]
    [DEFINE out [CONCAT [VAR out] [NODE_STRING [INDEX [VAR args] [VAR i]]]]]
    [DEFINE i [MATH [VAR i] + 1]]
  ]

  [DEFINE node [MAKE node]]
  [SET [VAR node] kind [CONST nodeKindString]]
  [SET [VAR node] val [ANY [VAR out]]]
  [RETURN [ANY [VAR node]]]
]

[ADD_BLD "CONCAT" [FN node_concat]]