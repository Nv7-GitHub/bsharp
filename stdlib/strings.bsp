[FUNC @CONCAT [[PARAM !pars [ARRAY $STRING]] [RETURNS $STRING]] [
  [DEFINE !len 0]
  [DEFINE !i 0]
  [WHILE [< !i [LEN !pars]] [
    [DEFINE !len [+ !len [LEN [GET !pars !i]]]]
    [DEFINE !i [+ !i 1]]
  ]]
  [DEFINE !out [NEW $STRING !len]]
  [DEFINE !i 0]
  [WHILE [< !i [LEN !pars]] [
    [DEFINE !j 0]
    [DEFINE !par [GET !pars !i]]
    [WHILE [< !j [LEN !par]] [
      [APPEND !out [GET !par !j]]
      [DEFINE !j [+ !j 1]]
    ]]
    [DEFINE !i [+ !i 1]]
  ]]
  [RETURN !out]
]]

[FUNC @REVERSE [[PARAM !v $STRING] [RETURNS $STRING]] [
  [DEFINE !start 0]
  [DEFINE !end [- [LEN !v] 1]]
  [WHILE [< !start !end] [
    # Swap
    [DEFINE !buf [GET !v !start]]
    [SET !v !start [GET !v !end]]
    [SET !v !end !buf]

    # Increment
    [DEFINE !start [+ !start 1]]
    [DEFINE !end [- !end 1]]
  ]]
  [RETURN !v]
]]

[FUNC @ITOA [[PARAM !v [INT]] [RETURNS $STRING]] [
  [IF [= !v 0] [RETURN "0"] []]

  [DEFINE !out [NEW $STRING]]

  # Handle negatives
  [DEFINE !negative [= 0 1]]
  [IF [< !v 0] [
    [DEFINE !negative [= 0 0]]
    [DEFINE !v [* -1 !v]]
  ] []]

  # Go through digits
  [WHILE [NEQ !v 0] [
    [DEFINE !rem [% !v 10]]
    [IF [> !rem 9] [
      [APPEND !out '0']
    ] [
      [APPEND !out [+ '0' [TOC !rem]]]
    ]]
    [DEFINE !v [/ !v 10]]
  ]]

  [IF !negative [
    [APPEND !out '-']
  ] []]

  [RETURN [@REVERSE !out]]
]]

[FUNC @BTOA [[PARAM !v [BOOL]] [RETURNS $STRING]] [
  [IF !v [
    [RETURN "TRUE"]
  ] [
    [RETURN "FALSE"]
  ]]
]]