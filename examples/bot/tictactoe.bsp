[IMPORT "strings.bsp"]

# Consts
[DEFINE EMPTY 0]
[DEFINE X 1]
[DEFINE O 2]
[DEFINE AI [VAR X]]
[DEFINE PLAYER [VAR O]]
[DEFINE WIDTH 3]
[DEFINE HEIGHT 3]

# Copies the board
[FUNC COPYBOARD [PARAM board INT{}{}] [RETURNS INT{}{}]
  [DEFINE out [MAKE INT{}{}]]
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR board]]]
    [DEFINE j 0]
    [DEFINE row [MAKE INT{}]]
    [WHILE [COMPARE [VAR j] < [LENGTH [INDEX [VAR board] [VAR i]]]]
      [APPEND [VAR row] [INDEX [INDEX [VAR board] [VAR i]] [VAR j]]]
      [DEFINE j [MATH [VAR j] + 1]]
    ]
    [APPEND [VAR out] [VAR row]]
    [DEFINE i [MATH [VAR i] + 1]]
  ]
  [RETURN [VAR out]]
]

[FUNC EQUALS [PARAM a INT] [PARAM b INT] [PARAM c INT] [RETURNS BOOL]
  [RETURN [AND [AND [COMPARE [VAR a] == [VAR b]] [COMPARE [VAR b] == [VAR c]]] [COMPARE [VAR a] != [VAR EMPTY]]]]
]

[FUNC WINNER [PARAM board INT{}{}] [PARAM depth INT] [RETURNS INT]
  # Check rows
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [VAR HEIGHT]]
    [DEFINE row [INDEX [VAR board] [VAR i]]]
    [IF [EQUALS [INDEX [VAR row] 0] [INDEX [VAR row] 1] [INDEX [VAR row] 2]] # TODO: Don't hardcode, use width somehow
      [RETURN [INDEX [VAR row] 0]]
    ]
    [DEFINE i [MATH [VAR i] + 1]]
  ]

  # Check columns
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [VAR WIDTH]]
    [IF [EQUALS [INDEX [INDEX [VAR board] 0] [VAR i]] [INDEX [INDEX [VAR board] 1] [VAR i]] [INDEX [INDEX [VAR board] 2] [VAR i]]] # TODO: Don't hardcode, use height somehow
      [RETURN [INDEX [INDEX [VAR board] 0] [VAR i]]]
    ]
    [DEFINE i [MATH [VAR i] + 1]]
  ]

  # Check diagonals
  [IF [EQUALS [INDEX [INDEX [VAR board] 0] 0] [INDEX [INDEX [VAR board] 1] 1] [INDEX [INDEX [VAR board] 2] 2]] # TODO: Don't hardcode, use width and height somehow
    [RETURN [INDEX [INDEX [VAR board] 0] 0]]
  ]

  [IF [EQUALS [INDEX [INDEX [VAR board] 0] 2] [INDEX [INDEX [VAR board] 1] 1] [INDEX [INDEX [VAR board] 2] 0]] # TODO: Don't hardcode, use width and height somehow
    [RETURN [INDEX [INDEX [VAR board] 0] 2]]
  ]

  # Count non-empty
  [DEFINE i 0]
  [DEFINE count 0]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR board]]]
    [DEFINE j 0]
    [WHILE [COMPARE [VAR j] < [LENGTH [INDEX [VAR board] [VAR i]]]]
      [IF [COMPARE [INDEX [INDEX [VAR board] [VAR i]] [VAR j]] == [VAR EMPTY]]
        [DEFINE count [MATH [VAR count] + 1]]
      ]
      [DEFINE j [MATH [VAR j] + 1]]
    ]
    [DEFINE i [MATH [VAR i] + 1]]
  ]
  [IF [COMPARE [VAR count] != 0]
    [RETURN -1]
  ]

  # Tie
  [RETURN [VAR EMPTY]]
]

[FUNC SHOWBOARD [PARAM board INT{}{}] [RETURNS STRING]
  [DEFINE btns [MAKE MAP{STRING}STRING{}{}]]
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [VAR HEIGHT]]
    [DEFINE row [MAKE MAP{STRING}STRING{}]]

    [DEFINE j 0]
    [WHILE [COMPARE [VAR j] < [VAR WIDTH]]
      [DEFINE label "🟦"]
      [DEFINE color 4]
      [DEFINE val [INDEX [INDEX [VAR board] [VAR i]] [VAR j]]]
      [IF [COMPARE [VAR val] == [VAR X]]
        [DEFINE label "❌"]
        [DEFINE color 1]
      ELSE
        [IF [COMPARE [VAR val] == [VAR O]]
          [DEFINE label "⭕"]
          [DEFINE color 2]
        ]
      ]

      [DEFINE id [CONCAT [STRING [VAR i]] "|" [STRING [VAR j]]]]
      [DEFINE btn [COLOR [BUTTON [VAR label] [VAR id]] [VAR color]]]
      [APPEND [VAR row] [VAR btn]]

      [DEFINE j [MATH [VAR j] + 1]]
    ]
    [APPEND [VAR btns] [VAR row]]
    [DEFINE i [MATH [VAR i] + 1]]
  ]

  [RETURN [BUTTONS [VAR btns]]]
]

#[DEFINE inf 10] # Max possible depth

# Minimax
[FUNC MINIMAX [PARAM board INT{}{}] [PARAM depth INT] [PARAM maximize BOOL] [RETURNS INT]
  [DEFINE winner [WINNER [VAR board] [VAR depth]]]
  [IF [COMPARE [VAR winner] == [VAR EMPTY]]
    [RETURN 0]
  ELSE
    [IF [COMPARE [VAR winner] == [VAR AI]]
      [RETURN 1]
      #[RETURN [MATH [VAR inf] - [VAR depth]]] # AI Wins
    ELSE
      [IF [COMPARE [VAR winner] == [VAR PLAYER]]
        [RETURN -1]
        #[RETURN [MATH [MATH -1 * [VAR inf]] + [VAR depth]]] # Player wins
      ]
    ]
  ]

  [DEFINE best 0]
  [DEFINE hasbest FALSE]
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR board]]]
    [DEFINE j 0]
    [WHILE [COMPARE [VAR j] < [LENGTH [INDEX [VAR board] [VAR i]]]]
      [DEFINE val [INDEX [INDEX [VAR board] [VAR i]] [VAR j]]]
      [IF [COMPARE [VAR val] == [VAR EMPTY]]
        # Make move
        [DEFINE player [VAR PLAYER]]
        [IF [VAR maximize] # Maximize means AI is playing
          [DEFINE player [VAR AI]]
        ]
        [DEFINE newboard [COPYBOARD [VAR board]]]
        [SETINDEX [INDEX [VAR newboard] [VAR i]] [VAR j] [VAR player]]
        [DEFINE score [MINIMAX [VAR newboard] [MATH [VAR depth] + 1] [NOT [VAR maximize]]]]

        # Check if move is better
        [IF [NOT [VAR hasbest]]
          [DEFINE best [VAR score]]
          [DEFINE hasbest TRUE]
        ELSE
          [IF [AND [VAR maximize] [COMPARE [VAR score] > [VAR best]]]
            [DEFINE best [VAR score]]
          ]
          [IF [AND [NOT [VAR maximize]] [COMPARE [VAR score] < [VAR best]]]
            [DEFINE best [VAR score]]
          ]
        ]
      ]
      [DEFINE j [MATH [VAR j] + 1]]
    ]

    [DEFINE i [MATH [VAR i] + 1]]
  ]

  # Otherwise, return best
  [RETURN [VAR best]]
]

# Make board
[DEFINE state [MAKE INT{}{}]]
[DEFINE i 0]
[WHILE [COMPARE [VAR i] < [VAR WIDTH]]
  [DEFINE j 0]
  [DEFINE row [MAKE INT{}]]
  [WHILE [COMPARE [VAR j] < [VAR HEIGHT]]
    [APPEND [VAR row] [VAR EMPTY]]
    [DEFINE j [MATH [VAR j] + 1]]
  ]
  [APPEND [VAR state] [VAR row]]
  [DEFINE i [MATH [VAR i] + 1]]
]

# Turns
[DEFINE turn [VAR PLAYER]]
[PRINT "==Welcome to Tic Tac Toe!==```\n**AI Logs:**\n```"]
[DEFINE running TRUE]
[WHILE [VAR running]
  [DEFINE click [SHOWBOARD [VAR state]]]
  [DEFINE rawpos [SPLIT [VAR click] "|"]]
  [DEFINE pos [ARRAY [INT [INDEX [VAR rawpos] 0]] [INT [INDEX [VAR rawpos] 1]]]]

  # Check if can make move
  [DEFINE val [INDEX [INDEX [VAR state] [INDEX [VAR pos] 0]] [INDEX [VAR pos] 1]]]
  [IF [COMPARE [VAR val] != [VAR EMPTY]]
    [PRINT "Invalid move!"]
  ELSE
    [SETINDEX [INDEX [VAR state] [INDEX [VAR pos] 0]] [INDEX [VAR pos] 1] [VAR turn]]

    [DEFINE winner [WINNER [VAR state] 0]]
    [IF [COMPARE [VAR winner] != -1]
      [PRINT "```\n**Result:**\n```"]
      [IF [COMPARE [VAR winner] == [VAR AI]]
        [PRINT "AI wins!"]
      ELSE
        [IF [COMPARE [VAR winner] == [VAR PLAYER]]
          [PRINT "Player wins!"]
        ELSE
          [PRINT "Tie!"]
        ]
      ]
      [DEFINE running FALSE]
    ELSE
      [DEFINE start [TIME MILLI]]

      # Do AI turn, check best move
      [DEFINE y 0]
      [DEFINE best [MAKE INT{}]]
      [DEFINE bestscore -2] # Lowest possible score is -1, so will guarenteed get one
      [WHILE [COMPARE [VAR y] < [LENGTH [VAR state]]]
        [DEFINE x 0]
        [WHILE [COMPARE [VAR x] < [LENGTH [INDEX [VAR state] [VAR y]]]]
          [DEFINE val [INDEX [INDEX [VAR state] [VAR y]] [VAR x]]]
          [IF [COMPARE [VAR val] == [VAR EMPTY]]
            # Attempt move
            [SETINDEX [INDEX [VAR state] [VAR y]] [VAR x] [VAR AI]]
            [DEFINE score [MINIMAX [VAR state] 0 FALSE]]

            [IF [COMPARE [VAR score] > [VAR bestscore]]
              [DEFINE bestscore [VAR score]]
              [DEFINE best [ARRAY [VAR y] [VAR x]]]
            ]
            [SETINDEX [INDEX [VAR state] [VAR y]] [VAR x] [VAR EMPTY]]
          ]

          [DEFINE x [MATH [VAR x] + 1]]
        ]
        [DEFINE y [MATH [VAR y] + 1]]
      ]

      # Perform best move
      [SETINDEX [INDEX [VAR state] [INDEX [VAR best] 0]] [INDEX [VAR best] 1] [VAR AI]]

      # Print time
      [PRINT [CONCAT "Calculated move in " [STRING [MATH [TIME MILLI] - [VAR start]]] "ms."]]
    ]
  ]
]
