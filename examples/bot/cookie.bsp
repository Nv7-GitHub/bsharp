[IMPORT "strings.bsp"]

[FUNC FORMATINT [PARAM a INT] [RETURNS STRING]
  [IF [COMPARE [VAR a] < 1000]
    [RETURN [STRING [VAR a]]]
  ]
  [IF [AND [COMPARE [VAR a] > 1000] [COMPARE [VAR a] < 1000000]]
    [RETURN [CONCAT [STRING [MATH [VAR a] / 1000]] "k"]]
  ]
  [IF [AND [COMPARE [VAR a] > 1000000] [COMPARE [VAR a] < 1000000000]]
    [RETURN [CONCAT [STRING [MATH [VAR a] / 1000000]] "m"]]
  ]
  [RETURN [STRING [VAR a]]]
]

# Upgrades
[DEFINE upgrades [MAKE MAP{STRING}INT]] # MAP{Name}Price (price ^ (quantity + 1) is cost), (quantity ^ benefit is CPS benefit) 
[DEFINE benefit [MAKE MAP{STRING}INT]]
[DEFINE icons [MAKE MAP{STRING}STRING]] # MAP{Name}Icon
[DEFINE names [ARRAY "Clicker" "Granny" "Miner" "Factory" "Wizard"]]
[SET [VAR upgrades] "Clicker" 2]
[SET [VAR benefit] "Clicker" 1]
[SET [VAR icons] "Clicker" "🖱️"]
[SET [VAR upgrades] "Granny" 5]
[SET [VAR benefit] "Granny" 2]
[SET [VAR icons] "Granny" "👵"]
[SET [VAR upgrades] "Miner" 10]
[SET [VAR benefit] "Miner" 4]
[SET [VAR icons] "Miner" "⛏️"]
[SET [VAR upgrades] "Factory" 25]
[SET [VAR benefit] "Factory" 8]
[SET [VAR icons] "Factory" "🏭"]
[SET [VAR upgrades] "Wizard" 50]
[SET [VAR benefit] "Wizard" 16]
[SET [VAR icons] "Wizard" "🧙‍♂️"]

# Calc quantities
[DEFINE data ""]
[IF [COMPARE [DB EXISTS [USERID]] == "true"]
  [DEFINE data [DB GET [USERID]]]
]
[DEFINE inv [SPLIT [VAR data] "|"]]
[IF [COMPARE [LENGTH [VAR inv]] == 0] # Start out with a clicker
  [DEFINE inv [ARRAY "Clicker"]]
  [DB SET [USERID] [JOIN [VAR inv] "|"]]
]

[DEFINE counts [MAKE MAP{STRING}INT]]
[DEFINE i 0]
[WHILE [COMPARE [VAR i] < [LENGTH [VAR inv]]]
  # Increment by one for every item
  [DEFINE item [INDEX [VAR inv] [VAR i]]]
  [DEFINE v 0]
  [IF [EXISTS [VAR counts] [VAR item]]
    [DEFINE v [GET [VAR counts] [VAR item]]]
  ]
  [SET [VAR counts] [VAR item] [MATH [VAR v] + 1]]

  [DEFINE i [MATH [VAR i] + 1]]
]

# Calc CPS
[DEFINE cps 0]
[FUNC CALCCPS
  [DEFINE cps 0]
  [DEFINE i 0]
  [DEFINE keys [KEYS [VAR counts]]]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR keys]]]
    [DEFINE item [INDEX [VAR keys] [VAR i]]]
    [DEFINE price [GET [VAR benefit] [VAR item]]]
    [DEFINE quantity [GET [VAR counts] [VAR item]]]
    [DEFINE benefit [MATH [VAR quantity] ^ [VAR price]]]
    [DEFINE cps [MATH [VAR cps] + [VAR benefit]]]
    [DEFINE i [MATH [VAR i] + 1]]
  ]
]
[CALCCPS]

# Calc money made
[DEFINE money [FLOAT 0]]
[IF [COMPARE [DB EXISTS [CONCAT "money_" [USERID]]] == "true"]
  [DEFINE money [FLOAT [DB GET [CONCAT "money_" [USERID]]]]]
]
[IF [COMPARE [DB EXISTS [CONCAT "lastsaved_" [USERID]]] == "true"]
  [DEFINE lastsaved [INT [DB GET [CONCAT "lastsaved_" [USERID]]]]]
  [DEFINE currtime [TIME]]
  [DB SET [CONCAT "lastsaved_" [USERID]] [STRING [VAR currtime]]]

  [DEFINE made [MATH [VAR cps] * [MATH [VAR currtime] - [VAR lastsaved]]]]
  [DEFINE money [MATH [VAR money] + [VAR made]]]
  [DB SET [CONCAT "money_" [USERID]] [STRING [VAR money]]]
ELSE
  [DB SET [CONCAT "lastsaved_" [USERID]] [STRING [TIME]]]
]

# Check if anything wants to be bought
[DEFINE tobuy [INPUT "Enter an upgrade to buy"]]
[FUNC BUY
  # Get price
  [IF [NOT [EXISTS [VAR upgrades] [VAR tobuy]]]
    [RETURN [PRINT "ERROR: That upgrade does't exist!\n"]]
  ]
  [DEFINE price [GET [VAR upgrades] [VAR tobuy]]] # Price value
  [DEFINE count 0]
  [IF [EXISTS [VAR counts] [VAR tobuy]]
    [DEFINE count [GET [VAR counts] [VAR tobuy]]]
  ]
  [DEFINE price [MATH [VAR price] ^ [MATH [VAR count] + 1]]] # Raise to power of upgrades
  [DEFINE price [MATH [VAR price] * 60]] # Multiply by 60
  [IF [COMPARE [VAR money] > [FLOAT [VAR price]]]
    # Subtract from money
    [DEFINE money [MATH [VAR money] - [FLOAT [VAR price]]]]
    [DB SET [CONCAT "money_" [USERID]] [STRING [VAR money]]]

    # Add to inventory
    [APPEND [VAR inv] [VAR tobuy]]
    [DB SET [USERID] [JOIN [VAR inv] "|"]]

    # Increment count
    [DEFINE count [MATH [VAR count] + 1]]
    [SET [VAR counts] [VAR tobuy] [VAR count]]

    # Update CPS
    [CALCCPS]
  ELSE
    [RETURN [PRINT "ERROR: You don't have enough money to buy that upgrade!\n"]]
  ]
]
[IF [COMPARE [VAR tobuy] != ""]
  [BUY]
]

# Print output
[PRINT "==Cookie Clicker==```"]
[PRINT [CONCAT "**Money**: " [STRING [VAR money]]]]
[PRINT [CONCAT "**CPS**: " [STRING [VAR cps]]]]

# Print inv
[DEFINE i 0]
[WHILE [COMPARE [VAR i] < [LENGTH [VAR names]]]
  [DEFINE item [INDEX [VAR names] [VAR i]]]
  [DEFINE icon [GET [VAR icons] [VAR item]]]
  [DEFINE price [GET [VAR upgrades] [VAR item]]] # Price value
  [DEFINE count 0]
  [IF [EXISTS [VAR counts] [VAR item]]
    [DEFINE count [GET [VAR counts] [VAR item]]]
  ]
  [DEFINE price [MATH [VAR price] ^ [MATH [VAR count] + 1]]] # Raise to power of upgrades
  [DEFINE price [MATH [VAR price] * 60]] # Multiply by 60
  [DEFINE canbuy "🚫"]
  [IF [COMPARE [VAR money] > [FLOAT [VAR price]]]
    [DEFINE canbuy "✅"]
  ]
  [PRINT [CONCAT [VAR canbuy] " " [VAR icon] " **" [VAR item] "** - " [FORMATINT [VAR price]] " (" [STRING [VAR count]] ")"]]

  [DEFINE i [MATH [VAR i] + 1]]
]

[PRINT "```==Cookie Clicker=="]

# TODO: Buying (no input method yet)
# - When implementing buying, make sure to check if it exists and if you have the money