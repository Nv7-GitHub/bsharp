[TYPEDEF pos STRUCT{char:INT,line:INT}]
[TYPEDEF token STRUCT{typ:INT,val:STRING,pos:pos}]
[DEFINE tokTypeNumber 0]
[DEFINE tokTypeString 1]
[DEFINE tokTypeLBrack 2]
[DEFINE tokTypeRBrack 3]

[FUNC TOKEN [PARAM typ INT] [PARAM val STRING] [PARAM pos pos] [RETURNS token]
  [DEFINE out [MAKE token]]
  [SET [VAR out] typ [VAR typ]]
  [SET [VAR out] val [VAR val]]
  [SET [VAR out] pos [VAR pos]]
  [RETURN [VAR out]]
]

[TYPEDEF tokenizer STRUCT{tokens:ARRAY{token},pos:INT,char:INT,line:INT,code:STRING}]

# Tokenizer utils
[FUNC IND [PARAM tokenizer tokenizer] [RETURNS INT] [RETURN [GET [VAR tokenizer] pos]]]

[FUNC INCR [PARAM tokenizer tokenizer]
  # Check char
  [DEFINE char [INDEX [GET [VAR tokenizer] code] [IND [VAR tokenizer]]]]
  [IF [COMPARE [VAR char] == "\n"]
    [SET [VAR tokenizer] line [MATH [GET [VAR tokenizer] line] + 1]]
    [SET [VAR tokenizer] char 1]
  ]
  [SET [VAR tokenizer] pos [MATH [GET [VAR tokenizer] pos] + 1]]
]

[FUNC POS [PARAM tok tokenizer] [RETURNS pos]
  [DEFINE out [MAKE pos]]
  [SET [VAR out] char [GET [VAR tok] char]]
  [SET [VAR out] line [GET [VAR tok] line]]
  [RETURN [VAR out]]
]

[FUNC ADDTOK [PARAM tok tokenizer] [PARAM token token]
  [APPEND [GET [VAR tok] tokens] [VAR token]]
]

[FUNC ADDNUM [PARAM tok tokenizer]
  [DEFINE pos [POS [VAR tok]]]
  [DEFINE code [GET [VAR tok] code]]
  [DEFINE running TRUE]
  [DEFINE val ""]
  [WHILE [AND [COMPARE [IND [VAR tok]] < [LENGTH [VAR code]]] [VAR running]]
    [DEFINE char [INDEX [VAR code] [IND [VAR tok]]]]
    [DEFINE isNum FALSE]
    [SWITCH [VAR char]
      [CASE "0" [DEFINE isNum TRUE]]
      [CASE "1" [DEFINE isNum TRUE]]
      [CASE "2" [DEFINE isNum TRUE]]
      [CASE "3" [DEFINE isNum TRUE]]
      [CASE "4" [DEFINE isNum TRUE]]
      [CASE "5" [DEFINE isNum TRUE]]
      [CASE "6" [DEFINE isNum TRUE]]
      [CASE "7" [DEFINE isNum TRUE]]
      [CASE "8" [DEFINE isNum TRUE]]
      [CASE "9" [DEFINE isNum TRUE]]
      [CASE "." [DEFINE isNum TRUE]]
      [CASE "-" [DEFINE isNum TRUE]]
    ]
    [IF [VAR isNum]
      [DEFINE val [CONCAT [VAR val] [VAR char]]]
      [INCR [VAR tok]]
    ELSE
      [DEFINE running FALSE]
    ]
  ]
  [ADDTOK [VAR tok] [TOKEN [VAR tokTypeNumber] [VAR val] [VAR pos]]]
]

# TODO: Figure out errors
[FUNC TOKENIZE [PARAM code STRING] [RETURNS ARRAY{token}]
  [DEFINE out [MAKE tokenizer]]
  [SET [VAR out] tokens [MAKE ARRAY{token}]]
  [SET [VAR out] code [VAR code]]
  [SET [VAR out] pos 0]
  [SET [VAR out] char 1]
  [SET [VAR out] line 1]
  [WHILE [COMPARE [IND [VAR out]] < [LENGTH [VAR code]]]
    [DEFINE char [INDEX [VAR code] [IND [VAR out]]]]
    [SWITCH [VAR char]
      [CASE "["
        [ADDTOK [VAR out] [TOKEN [VAR tokTypeLBrack] "[" [POS [VAR out]]]]
        [INCR [VAR out]]
      ]

      [CASE "]"
        [ADDTOK [VAR out] [TOKEN [VAR tokTypeRBrack] "]" [POS [VAR out]]]]
        [INCR [VAR out]]
      ]

      [CASE "0" [ADDNUM [VAR out]]]
      [CASE "1" [ADDNUM [VAR out]]]
      [CASE "2" [ADDNUM [VAR out]]]
      [CASE "3" [ADDNUM [VAR out]]]
      [CASE "4" [ADDNUM [VAR out]]]
      [CASE "5" [ADDNUM [VAR out]]]
      [CASE "6" [ADDNUM [VAR out]]]
      [CASE "7" [ADDNUM [VAR out]]]
      [CASE "8" [ADDNUM [VAR out]]]
      [CASE "9" [ADDNUM [VAR out]]]
      [CASE "-" 
        # Check if next is num
        [DEFINE next [INDEX [VAR code] [MATH [IND [VAR out]] + 1]]]
        [DEFINE isNum FALSE]
        [SWITCH [VAR next]
          [CASE "0" [DEFINE isNum TRUE]]
          [CASE "1" [DEFINE isNum TRUE]]
          [CASE "2" [DEFINE isNum TRUE]]
          [CASE "3" [DEFINE isNum TRUE]]
          [CASE "4" [DEFINE isNum TRUE]]
          [CASE "5" [DEFINE isNum TRUE]]
          [CASE "6" [DEFINE isNum TRUE]]
          [CASE "7" [DEFINE isNum TRUE]]
          [CASE "8" [DEFINE isNum TRUE]]
          [CASE "9" [DEFINE isNum TRUE]]
        ]
        [IF [VAR isNum]
          [ADDNUM [VAR out]]
        ELSE
          # Add ident
        ]
      ]

      # Ignore whitespace
      [CASE "\t" [INCR [VAR out]]]
      [CASE " " [INCR [VAR out]]]
      [CASE "\n" [INCR [VAR out]]]

      [DEFAULT
        # TODO: Try add ident
        # TODO: Strings
        [INCR [VAR out]]
      ]
    ]
  ]
  [RETURN [GET [VAR out] tokens]]
]
