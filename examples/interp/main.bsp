[DEFINE src "[PRINT [FTOA [MATH 1.0 + 1.0]]]"]

[DEFINE intvals [MAKE ARRAY{INT}]]
[DEFINE floatvals [MAKE ARRAY{FLOAT}]]
[DEFINE stringvals [MAKE ARRAY{STRING}]]

[FUNC ISINT [PARAM src STRING] [RETURNS BOOL]
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR src]]]
    [SWITCH [INDEX [VAR src] [VAR i]]
      [CASE "0" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "1" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "2" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "3" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "4" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "5" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "6" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "7" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "8" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "9" [DEFINE i [MATH [VAR i] + 1]]]
      [DEFAULT
        [RETURN FALSE]
      ]
    ]
  ]
  [RETURN TRUE]
]

[FUNC ISFLOAT [PARAM src STRING] [RETURNS BOOL]
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR src]]]
    [SWITCH [INDEX [VAR src] [VAR i]]
      [CASE "0" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "1" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "2" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "3" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "4" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "5" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "6" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "7" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "8" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "9" [DEFINE i [MATH [VAR i] + 1]]]
      [CASE "." [DEFINE i [MATH [VAR i] + 1]]]
      [DEFAULT
        [RETURN FALSE]
      ]
    ]
  ]
  [RETURN TRUE]
]

[FUNC EVAL [PARAM src STRING] [RETURNS INT]
  # Check if string
  [IF [COMPARE [INDEX [VAR src] 0] != "["]
    [IF [ISINT [VAR src]]
      [APPEND [VAR intvals] [INT [VAR src]]]
      [RETURN [MATH [LENGTH [VAR intvals]] - 1]]
    ]
    [IF [ISFLOAT [VAR src]]
      [APPEND [VAR floatvals] [FLOAT [VAR src]]]
      [RETURN [MATH [LENGTH [VAR floatvals]] - 1]]
    ]
    # String literal?
    [IF [COMPARE [INDEX [VAR src] 0] == "\""]#"
      [DEFINE val ""]
      [DEFINE i 1]
      [WHILE [COMPARE [VAR i] < [MATH [LENGTH [VAR src]] - 1]]
        [DEFINE val [CONCAT [VAR val] [INDEX [VAR src] [VAR i]]]]
        [DEFINE i [MATH [VAR i] + 1]]
      ]
      [APPEND [VAR stringvals] [VAR val]]
      [RETURN [MATH [LENGTH [VAR stringvals]] - 1]]
    ] 
    [APPEND [VAR stringvals] [VAR src]]
    [RETURN [MATH [LENGTH [VAR stringvals]] - 1]]
  ]

  # Get rid of lparen
  [DEFINE i 1]
  [DEFINE fn ""]
  [WHILE [COMPARE [INDEX [VAR src] [VAR i]] != " "] # Go to the space
    [DEFINE fn [CONCAT [VAR fn] [INDEX [VAR src] [VAR i]]]] # Append
    [DEFINE i [MATH [VAR i] + 1]]
  ]
  # Eat space
  [DEFINE i [MATH [VAR i] + 1]]
  # Get body
  [DEFINE argsraw [MAKE ARRAY{STRING}]]
  [WHILE [COMPARE [INDEX [VAR src] [VAR i]] != "]"] # Go to the closing bracket
    [DEFINE arg ""]
    # Count brackets
    [DEFINE bracks 0]
    [DEFINE openQuote [COMPARE 1 == 0]] # False

    [IF [COMPARE [INDEX [VAR src] [VAR i]] == "["] # Eat lbrack if there is one
      [DEFINE i [MATH [VAR i] + 1]]
      [DEFINE arg "["]
      [DEFINE bracks 1]
    ELSE
      [IF [COMPARE [INDEX [VAR src] [VAR i]] == "\""] Eat quote
        [DEFINE openQuote TRUE]
        [DEFINE i [MATH [VAR i] + 1]]
        [DEFINE arg "\""]
      ]
    ]
    [DEFINE done [COMPARE 1 == 0]]
    [WHILE [NOT [VAR done]] # Wait for closing bracket and closing quote
      [SWITCH  [INDEX [VAR src] [VAR i]]
        [CASE "["
          [DEFINE bracks [MATH [VAR bracks] + 1]]
          [DEFINE arg [CONCAT [VAR arg] [INDEX [VAR src] [VAR i]]]]
          [DEFINE i [MATH [VAR i] + 1]]
        ]

        [CASE "]"
          [IF [COMPARE [VAR bracks] >= 1]
            [DEFINE arg [CONCAT [VAR arg] [INDEX [VAR src] [VAR i]]]]
            [DEFINE i [MATH [VAR i] + 1]]
          ] # Eat rbrack
          [DEFINE bracks [MATH [VAR bracks] - 1]]
          [IF [AND [COMPARE [VAR bracks] < 1] [NOT [VAR openQuote]]]
            [DEFINE done TRUE]
          ]
        ]

        [CASE "\"" #" Quote 
          [DEFINE openQuote [NOT [VAR openQuote]]]
          [DEFINE arg [CONCAT [VAR arg] [INDEX [VAR src] [VAR i]]]]
          [DEFINE i [MATH [VAR i] + 1]]
        ]

        [CASE " "
          [IF [AND [COMPARE [VAR bracks] == 0] [NOT [VAR openQuote]]]
            [DEFINE done TRUE]
          ELSE
            [DEFINE arg [CONCAT [VAR arg] [INDEX [VAR src] [VAR i]]]]
          ]
          [DEFINE i [MATH [VAR i] + 1]]
        ]

        [DEFAULT
          [DEFINE arg [CONCAT [VAR arg] [INDEX [VAR src] [VAR i]]]]
          [DEFINE i [MATH [VAR i] + 1]]
        ]
      ]
    ]

    [APPEND [VAR argsraw] [VAR arg]]
    [IF [COMPARE [INDEX [VAR src] [VAR i]] == " "] [DEFINE i [MATH [VAR i] + 1]]] # eat if space
  ]

  # Build args
  [DEFINE args [MAKE ARRAY{INT}]]
  [DEFINE i 0]
  [WHILE [COMPARE [VAR i] < [LENGTH [VAR argsraw]]]
    # Build args
    [DEFINE val [EVAL [INDEX [VAR argsraw] [VAR i]]]]
    [APPEND [VAR args] [VAR val]]
    [DEFINE i [MATH [VAR i] + 1]]
  ]

  # Eval 
  [SWITCH [VAR fn]
    [CASE "PRINT"
      [PRINT [INDEX [VAR stringvals] [INDEX [VAR args] 0]]] # Print value
      [RETURN [MATH 0 - 1]]
    ]

    [CASE "ITOA"
      [DEFINE val [INDEX [VAR intvals] [INDEX [VAR args] 0]]] # Get value
      [APPEND [VAR stringvals] [STRING [VAR val]]]
      [RETURN [MATH [LENGTH [VAR stringvals]] - 1]]
    ]

    [CASE "FTOA"
      [DEFINE val [INDEX [VAR floatvals] [INDEX [VAR args] 0]]] # Get value
      [APPEND [VAR stringvals] [STRING [VAR val]]]
      [RETURN [MATH [LENGTH [VAR stringvals]] - 1]]
    ]

    [CASE "MATH"
      [DEFINE lhs [INDEX [VAR floatvals] [INDEX [VAR args] 0]]] # Get lhs
      [DEFINE rhs [INDEX [VAR floatvals] [INDEX [VAR args] 2]]] # Get rhs
      [DEFINE op [INDEX [VAR stringvals] [INDEX [VAR args] 1]]]
      [DEFINE out 1.0]
      [SWITCH [VAR op]
        [CASE "+"
          [DEFINE out [MATH [VAR lhs] + [VAR rhs]]]
        ]

        [CASE "-"
          [DEFINE out [MATH [VAR lhs] - [VAR rhs]]]
        ]

        [CASE "/"
          [DEFINE out [MATH [VAR lhs] / [VAR rhs]]]
        ]

        [CASE "*"
          [DEFINE out [MATH [VAR lhs] * [VAR rhs]]]
        ]

        [CASE "^"
          [DEFINE out [MATH [VAR lhs] ^ [VAR rhs]]]
        ]

        [CASE "%"
          [DEFINE out [MATH [VAR lhs] % [VAR rhs]]]
        ]
      ]
      [APPEND [VAR floatvals] [VAR out]]
      [RETURN [MATH [LENGTH [VAR floatvals]] - 1]]
    ]
  ]
  [RETURN [MATH 0 - 1]]
]

[EVAL [VAR src]]